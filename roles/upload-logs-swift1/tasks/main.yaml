- name: Set zuul-log-path fact
  include_role:
    name: set-zuul-log-path-fact
  when: zuul_log_path is not defined

# Always upload (true), never upload (false) or only on failure ('failure')
- when: zuul_site_upload_logs | default(true) | bool or
        (zuul_site_upload_logs == 'failure' and not zuul_success | bool)
  block:
    # Use chmod instead of file because ansible 2.5 file with recurse and
    # follow can't really handle symlinks to .
    - name: Ensure logs are readable before uploading
      delegate_to: "{{ _undocumented_test_worker_node_ | default('localhost') }}"
      command: "chmod -R u=rwX,g=rX,o=rX {{ zuul.executor.log_root }}/"
      # ANSIBLE0007 chmod used in place of argument mode to file
      tags:
        - skip_ansible_lint

    - name: Delete blacklisted files
      delegate_to: "{{ _undocumented_test_worker_node_ | default('localhost') }}"
      file:
        state: "absent"
        path: "{{ zuul.executor.log_root }}/{{ zj_item }}"
      loop: "{{ zuul_log_blacklist_files }}"
      loop_control:
        loop_var: zj_item

    # Job-output.json may contain sensitive information. Unless we know how to
    # sanitize it properly simply enforce it is empty
    - name: Create dummy job-output.json
      copy:
        dest: "{{ zuul.executor.log_root }}/job-output.json"
        content: ""
        mode: "0644"

    - name: Upload logs to swift
      delegate_to: "{{ _undocumented_test_worker_node_ | default('localhost') }}"
      no_log: true
      zuul_swift_upload:
        cloud: "{{ zuul_log_cloud_config }}"
        partition: "{{ zuul_log_partition }}"
        container: "{{ zuul_log_container }}"
        public: "{{ zuul_log_container_public }}"
        prefix: "{{ zuul_log_path }}"
        indexes: "{{ zuul_log_create_indexes }}"
        files:
          - "{{ zuul.executor.log_root }}/"
        delete_after: "{{ zuul_log_delete_after | default(omit) }}"
        archive_mode: true
      register: upload_results

- name: Setting zuul_upload_logs_results
  set_fact:
    zuul_upload_logs_results:
      url: "{{ zuul_log_storage_proxy_url | default(upload_results.endpoint, true) | regex_replace('\\/$', '') }}/{{ upload_results.path }}/"
      endpoint: "{{ upload_results.endpoint }}"
      path: "{{ upload_results.path }}/"
    cacheable: true

- block:
    - name: Return log URL to Zuul
      delegate_to: localhost
      zuul_return:
        data:
          zuul:
            log_url: "{{ zuul_upload_logs_results.url }}"
    - name: Print upload failures
      debug:
        var: upload_results.upload_failures
  when: upload_results is defined
